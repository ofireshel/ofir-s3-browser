warning: in the working copy of 'football.html', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'index.html', LF will be replaced by CRLF the next time Git touches it
[1mdiff --git a/football.html b/football.html[m
[1mindex 4533eae..1f98edb 100644[m
[1m--- a/football.html[m
[1m+++ b/football.html[m
[36m@@ -31,7 +31,7 @@[m
     footer { padding: 10px; color: #94a3b8; text-align: center; }[m
     .btn { padding: 8px 12px; border-radius: 10px; border: 2px solid #475569; background: linear-gradient(135deg, #1e293b, #334155); color: var(--text); font-weight: 700; text-decoration: none; }[m
     .padbtn, .actbtn { width: 58px; height: 58px; background: rgba(30,41,59,.8); border: 2px solid #475569; border-radius: 12px; color: var(--text); font-weight: 800; font-size: 16px; }[m
[31m-    .actbtn { width: 86px; height: 50px; font-size: 15px; }[m
[32m+[m[32m    .actbtn { width: 140px; height: 50px; font-size: 15px; }[m
     .padbtn:active, .actbtn:active { transform: translateY(1px); }[m
     @media (max-width: 820px) {[m
       #dock { left: 50% !important; right: auto !important; bottom: calc(80px + env(safe-area-inset-bottom)) !important; transform: translateX(-50%) !important; gap: 16px !important; }[m
[36m@@ -68,6 +68,7 @@[m
           <button data-key="ArrowDown" class="padbtn">S</button>[m
           <div></div>[m
         </div>[m
[32m+[m[32m        <button id="panicBtn" class="actbtn" style="display:none; width: 120px; height: 50px; font-size: 12px; background: linear-gradient(135deg, #dc2626, #b91c1c); border: 2px solid #991b1b; color: white;">PANIC!</button>[m
       </div>[m
     </main>[m
     <footer>[m
[36m@@ -136,6 +137,17 @@[m
       dashCooldownMs: 0,[m
       dashVec: { vx: 0, vy: 1 },[m
       dashing: false,[m
[32m+[m[32m      // panic button ability[m
[32m+[m[32m      panicMs: 0,[m
[32m+[m[32m      panicCooldownMs: 0,[m
[32m+[m[32m      panicVec: { vx: 0, vy: 0 },[m
[32m+[m[32m      panicking: false,[m
[32m+[m[32m      panicBtnVisible: false,[m
[32m+[m[32m      lastPanicCheck: 0,[m
[32m+[m[32m      // background music[m
[32m+[m[32m      bgMusicSource: null,[m
[32m+[m[32m      bgMusicGain: null,[m
[32m+[m[32m      bgMusicPlaying: false,[m
       projectiles: [],[m
       levelIntroMs: 0,[m
       mouse: {x: W/2, y:H/2},[m
[36m@@ -159,6 +171,13 @@[m
       state.scored = false;[m
       state.hasBall = 'qb';[m
       state.projectiles = [];[m
[32m+[m[32m      // Reset panic button state[m
[32m+[m[32m      state.panicking = false;[m
[32m+[m[32m      state.panicMs = 0;[m
[32m+[m[32m      state.panicBtnVisible = false;[m
[32m+[m[32m      document.getElementById('panicBtn').style.display = 'none';[m
[32m+[m[32m      // Stop background music[m
[32m+[m[32m      stopBgMusic();[m
       if(typeof newSpot === 'number') state.ballOnYard = Math.max(1, Math.min(99, newSpot));[m
       state.lineOfScrimmageYard = state.ballOnYard;[m
       const cx = (LEFT_HASH+RIGHT_HASH)/2;[m
[36m@@ -191,8 +210,8 @@[m
             ...Array(3).fill('orange'),[m
             ...Array(2).fill('pear')[m
           ];[m
[31m-      // Add one extra fruit every 2 levels (slower ramp), capped[m
[31m-      const extra = Math.min(5, Math.floor(Math.max(0, (state.level||1) - 1) / 2));[m
[32m+[m[32m      // Add one extra fruit every 3 levels (very slow ramp), capped[m
[32m+[m[32m      const extra = Math.min(3, Math.floor(Math.max(0, (state.level||1) - 1) / 3));[m
       const fruits = base.concat(Array(extra).fill(isMobile ? 'apple' : 'banana'));[m
       // Dynamic spacing based on field position: farther when far from end zone, closer when near[m
       const yardsToTD = Math.max(0, 100 - state.ballOnYard);[m
[36m@@ -242,6 +261,8 @@[m
         state.playStartMs = performance.now();[m
         playWhistle();[m
         announceDown();[m
[32m+[m[32m        // Start background music when play begins[m
[32m+[m[32m        startBgMusic();[m
       }[m
     }[m
 [m
[36m@@ -301,6 +322,29 @@[m
     // Removed on-screen boost button; use keyboard B or tryBoost via other UI if added later[m
     // passing removed[m
 [m
[32m+[m[32m    // Panic button handler[m
[32m+[m[32m    const panicBtn = document.getElementById('panicBtn');[m
[32m+[m[32m    panicBtn.addEventListener('click', (e) => {[m
[32m+[m[32m      e.preventDefault();[m
[32m+[m[32m      if(!state.snapped || state.gameOver || state.panicking) return;[m
[32m+[m
[32m+[m[32m      // Generate random backwards direction (always towards bottom of screen = own endzone)[m
[32m+[m[32m      const backwardsAngle = Math.PI + (Math.random() - 0.5) * Math.PI; // 180Â° Â± 90Â° = 90Â° to 270Â°[m
[32m+[m[32m      state.panicVec.vx = Math.cos(backwardsAngle);[m
[32m+[m[32m      state.panicVec.vy = Math.sin(backwardsAngle);[m
[32m+[m
[32m+[m[32m      // Ensure it's always moving backwards (positive Y = towards bottom)[m
[32m+[m[32m      if(state.panicVec.vy < 0.3) state.panicVec.vy = 0.3 + Math.random() * 0.7;[m
[32m+[m
[32m+[m[32m      state.panicking = true;[m
[32m+[m[32m      state.panicMs = 800; // 0.8 seconds of panic[m
[32m+[m[32m      state.panicBtnVisible = false;[m
[32m+[m[32m      panicBtn.style.display = 'none';[m
[32m+[m
[32m+[m[32m      // Play panic sound based on field position[m
[32m+[m[32m      playPanicSound();[m
[32m+[m[32m    });[m
[32m+[m
     function getMoveVector(){[m
       let vx=0, vy=0;[m
       if(keys.has('ArrowLeft')||keys.has('a')||keys.has('A')) vx -= 1;[m
[36m@@ -388,9 +432,29 @@[m
         d.x += d.vx; d.y += d.vy;[m
         if(reactNow){ d.reactAccum = 0; d.reactDelay = Math.random()*(DEF_REACT_MAX_MS-DEF_REACT_MIN_MS)+DEF_REACT_MIN_MS; }[m
         // Only some fruits are shooters at the start of a down; lazily assign per-play flag[m
[31m-        if(d.canShoot == null){ d.canShoot = Math.random() < 0.6; } // 60% will shoot this down[m
[31m-        // Shoot leaf toward carrier for apples, oranges, pears (that canShoot)[m
[31m-        if(state.snapped && d.canShoot && d.leafCooldown<=0 && (d.type==='apple' || d.type==='orange' || d.type==='pear')){[m
[32m+[m[32m        // Scale shooting probability based on level (starts low, increases slowly)[m
[32m+[m[32m        if(d.canShoot == null){[m
[32m+[m[32m          const baseShootChance = 0.25; // Start at 25% in early levels[m
[32m+[m[32m          const levelBonus = Math.min(0.4, (state.level - 1) * 0.06); // +6% per level, max +40%[m
[32m+[m[32m          const shootChance = Math.min(0.65, baseShootChance + levelBonus); // Cap at 65%[m
[32m+[m[32m          d.canShoot = Math.random() < shootChance;[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        // Determine which fruit types can shoot based on level[m
[32m+[m[32m        const canShootTypes = [];[m
[32m+[m[32m        if(d.type==='apple' || d.type==='orange' || d.type==='pear'){[m
[32m+[m[32m          canShootTypes.push(d.type);[m
[32m+[m[32m        }[m
[32m+[m[32m        // Add more types as levels increase (more gradual progression)[m
[32m+[m[32m        if(state.level >= 5 && d.type==='banana'){[m
[32m+[m[32m          canShootTypes.push('banana'); // Bananas start shooting at level 5[m
[32m+[m[32m        }[m
[32m+[m[32m        if(state.level >= 8 && d.type==='apple'){[m
[32m+[m[32m          canShootTypes.push('apple'); // Extra apples at level 8+[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        // Shoot leaf toward carrier for fruits that can shoot[m
[32m+[m[32m        if(state.snapped && d.canShoot && d.leafCooldown<=0 && canShootTypes.length > 0){[m
           const carrier = (state.hasBall==='qb') ? state.qb : (typeof state.hasBall==='number' ? state.receivers[state.hasBall] : state.qb);[m
           // Smart aim: bias aim slightly toward player's current velocity when chasing from behind[m
           let aimX = carrier.x, aimY = carrier.y;[m
[36m@@ -417,9 +481,11 @@[m
               };[m
             }[m
  